#!/usr/bin/env runhaskell
vim: set ft=lhaskell et ts=4 sts=4 sw=4 fdm=marker :

> module Main (main) where
>
> import Control.Monad (when)
> import System.Cmd (system)
> import System.Directory (doesFileExist)
> import System.Exit (ExitCode(..))
> import System.FilePath.Posix ((</>))
> import System.Posix.Env (setEnv)
>
> import Distribution.Simple.LocalBuildInfo (LocalBuildInfo(..))
> import Distribution.PackageDescription (PackageDescription)
> import Distribution.Simple ( Args
>                            , UserHooks(..)
>                            , defaultMainWithHooks
>                            , simpleUserHooks
>                            )
>
> type TestCase = String
>
> main :: IO ()
> main = defaultMainWithHooks hooks
>   where hooks = simpleUserHooks { runTests = runTests' }
>
> runTests' :: Args -> Bool -> PackageDescription -> LocalBuildInfo -> IO ()
> runTests' _ _ _ lbi =
>   setEnv "LD_LIBRARY_PATH" "#TOP_BUILDDIR#/src/.libs" True >>
>   runOneTest' "test01TraceMe" >>
>   runOneTest' "test02TraceSignal" >>
>   runOneTest' "testFreeBSD01TraceCont" >>
>   return ()
>   where
>       runOneTest' :: TestCase -> IO ()
>       runOneTest' = runOneTest lbi
>
> runOneTest :: LocalBuildInfo -> TestCase -> IO ()
> runOneTest lbi f = do
>   putStr (f ++ ": ")
>   hast <- doesFileExist patht
>   if hast
>       then system patht >>= die
>       else putStrLn "SKIP"
>   where
>       patht :: FilePath
>       patht = (buildDir lbi) </> f </> f
>
> die :: ExitCode -> IO ()
> die code =
>   case code of
>       ExitFailure ret -> error $ "Failed: " ++ show ret
>       _               -> putStrLn "OK"
